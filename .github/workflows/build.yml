name: build 
on:
  push:
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "NOTICE"
      - ".gitignore"
    tags:
      - "*"
  workflow_dispatch:

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-x86_64
            arch: x86_64
            os: linux
            cross-prefix: ""
            linker: "-pthread"
          - name: linux-arm64
            arch: aarch64
            os: linux
            cross-prefix: aarch64-linux-gnu-
            linker: "-pthread"
          - name: windows-x86_64
            arch: x86_64
            os: mingw32
            cross-prefix: x86_64-w64-mingw32-
            linker: "-pthread -static-libstdc++ -static-libgcc"
    needs: set-version
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: release/${{ env.VERSION }}

      - name: Install dependencies
        if: matrix.platform.name == 'linux-arm64' || matrix.platform.name == 'windows-x86_64'
        run: |
          sudo apt-get update -qq
          if [[ "${{ matrix.platform.name }}" == "linux-arm64" ]]; then
          sudo apt-get install -qq g++-aarch64-linux-gnu qemu-user
          fi
          if [[ "${{ matrix.platform.name }}" == "windows-x86_64" ]]; then
          sudo apt-get install -qq mingw-w64 gcc-mingw-w64
          fi

      - name: Build FFmpeg
        run: |
            ./configure --prefix=$(pwd)/build_output --cross-prefix="${{ matrix.platform.cross-prefix }}" --enable-cross-compile --target-os="${{ matrix.platform.os }}" --arch="${{ matrix.platform.arch }}" --extra-cflags="-DLIBTWOLAME_STATIC" --extra-ldflags="${{ matrix.platform.linker }}" --disable-programs --disable-doc --disable-network --disable-everything --enable-protocol=file --enable-decoder=h264 --enable-parser=h264 --enable-demuxer=h264 --enable-muxer=mp4 --enable-pic --disable-dxva2 --disable-asm
            make -j$(nproc)
            make install

      - name: Prepare for artifact
        run: |
          mkdir -p artifacts/lib
          mkdir -p artifacts/include
          mv build_output/lib/libavcodec.a artifacts/lib/
          mv build_output/lib/libavformat.a artifacts/lib/
          mv build_output/lib/libavutil.a artifacts/lib/
          mv build_output/include/libavcodec artifacts/include/
          mv build_output/include/libavformat artifacts/include/
          mv build_output/include/libavutil artifacts/include/
          tar -czvf ffmpeg.${{ matrix.platform.name }}.tar.gz artifacts

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg.${{ matrix.platform.name }}.tar.gz
          path: ffmpeg.${{ matrix.platform.name }}.tar.gz

  build-macos:
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macos-arm64
    needs: set-version
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: release/${{ env.VERSION }}

      - name: Build FFmpeg
        run: |
            ./configure --prefix=$(pwd)/build_output --enable-cross-compile --target-os=darwin --arch=arm64 --extra-cflags="-DLIBTWOLAME_STATIC" --extra-ldflags="-pthread" --disable-programs --disable-doc --disable-network --disable-everything --enable-protocol=file --enable-decoder=h264 --enable-parser=h264 --enable-demuxer=h264 --enable-muxer=mp4 --enable-pic --disable-asm
            make -j$(sysctl -n hw.logicalcpu)
            make install

      - name: Prepare for artifact
        run: |
          mkdir -p artifacts/lib
          mkdir -p artifacts/include
          mv build_output/lib/libavcodec.a artifacts/lib/
          mv build_output/lib/libavformat.a artifacts/lib/
          mv build_output/lib/libavutil.a artifacts/lib/
          mv build_output/include/libavcodec artifacts/include/
          mv build_output/include/libavformat artifacts/include/
          mv build_output/include/libavutil artifacts/include/
          tar -czvf ffmpeg.macos-arm64.tar.gz artifacts

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg.${{ matrix.platform.name }}.tar.gz
          path: ffmpeg.${{ matrix.platform.name }}.tar.gz

  create-release:
    name: Create Release
    if: contains(github.ref, 'tags/v')
    needs:
      - build
      - build-macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/download
        with:
          platform: windows-x86_64
      - uses: ./.github/actions/download
        with:
          platform: linux-x86_64
      - uses: ./.github/actions/download
        with:
          platform: linux-arm64
      - uses: ./.github/actions/download
        with:
          platform: macos-arm64
      - name: Env to output
        run: |
          echo "package_paths<<EOF" >> $GITHUB_OUTPUT
          cat package_paths.env >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: env
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.env.outputs.package_paths }}
