name: build 
on:
  push:
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "NOTICE"
      - ".gitignore"
    tags:
      - "*"
  workflow_dispatch:

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - name: Extract version from tag
        id: extract_version
        run: echo "version=7.1" >> $GITHUB_OUTPUT

  build-msvc:
    runs-on: windows-2022 # Windows Server 2022 so that it keeps VS2022
    needs: set-version
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          ref: release/${{ env.VERSION }}

      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            diffutils
            make
            zip
            pkgconf

      - name: Install yasm
        run: choco install yasm -y
          
      - name: Remove MSYS2 link and cl
        shell: msys2 {0}
        run: |
          rm $(which link)

      - name: Find MSVC bin Folder
        id: find_msvc_bin
        shell: pwsh
        run: |
          $clPath = Get-ChildItem -Path "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC" -Recurse -Filter "cl.exe" | Where-Object { $_.FullName -match "Hostx64\\x64" } | Select-Object -First 1 -ExpandProperty FullName
          if (-not $clPath) { throw "cl.exe not found in expected path." }
          $binFolder = Split-Path -Path $clPath -Parent
          $msysPath = $binFolder -replace '^([A-Za-z]):', '/$1' -replace '\\', '/'
          $msysPath = "/$msysPath"
          echo "found bin folder: $binFolder"
          echo "bin_folder=$msysPath" >> $GITHUB_OUTPUT

      - name: Build FFmpeg with MSVC
        shell: msys2 {0}
        run: | #export path to override msys cl and link (https://trac.ffmpeg.org/wiki/CompilationGuide/MSVC)
          export PATH="/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/:$PATH"
          export CC=cl
          export LD=link
          which cl.exe
          which link.exe
          ./configure --toolchain=msvc --target-os=win64 --arch=x86_64 --extra-ldflags="-pthread -static-libstdc++ -static-libgcc" --disable-programs --disable-doc --disable-network --disable-everything --enable-protocol=file --enable-decoder=h264 --enable-parser=h264 --enable-demuxer=h264 --enable-muxer=mp4 --enable-pic --disable-dxva2 --disable-asm
          make -j$(nproc)
          make install

      - name: Check for crash logs
        shell: bash
        if: failure()
        run: |
          if test -f ffbuild/config.log; then
            echo "Crash logs found:"
            cat ffbuild/config.log
          else
            echo "No crash log found"
          fi
    
      - name: Prepare for artifact
        run: |
          mkdir -p artifacts/lib
          mkdir -p artifacts/include
          mv build_output/lib/avcodec.lib artifacts/lib/
          mv build_output/lib/avformat.lib artifacts/lib/
          mv build_output/lib/avutil.lib artifacts/lib/
          mv build_output/include/libavcodec artifacts/include/
          mv build_output/include/libavformat artifacts/include/
          mv build_output/include/libavutil artifacts/include/
          tar -czvf ffmpeg.windows-msvc.tar.gz artifacts

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg.windows-msvc.tar.gz
          path: ffmpeg.windows-msvc.tar.gz

  create-release:
    name: Create Release
    if: contains(github.ref, 'tags/v')
    needs:
      - build-msvc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/download
        with:
          platform: windows-x86_64
      - name: Env to output
        run: |
          echo "package_paths<<EOF" >> $GITHUB_OUTPUT
          cat package_paths.env >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: env
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.env.outputs.package_paths }}
